Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id 981D41FAAA5
	for <lists+linux-kernel@lfdr.de>; Tue, 16 Jun 2020 10:02:01 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1727017AbgFPIB5 (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Tue, 16 Jun 2020 04:01:57 -0400
Received: from mx2.suse.de ([195.135.220.15]:54670 "EHLO mx2.suse.de"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726405AbgFPIB4 (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Tue, 16 Jun 2020 04:01:56 -0400
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx2.suse.de (Postfix) with ESMTP id BED06AD87;
        Tue, 16 Jun 2020 08:01:57 +0000 (UTC)
Date:   Tue, 16 Jun 2020 10:01:52 +0200
Message-ID: <s5himfr30cv.wl-tiwai@suse.de>
From:   Takashi Iwai <tiwai@suse.de>
To:     Kai-Heng Feng <kai.heng.feng@canonical.com>
Cc:     tiwai@suse.com, Jaroslav Kysela <perex@perex.cz>,
        =?UTF-8?B?TWljaGE=?= =?UTF-8?B?xYIgTWlyb3PFgmF3?= 
        <mirq-linux@rere.qmqm.pl>, Wenwen Wang <wenwen@cs.uga.edu>,
        Hui Wang <hui.wang@canonical.com>,
        Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>,
        Kailang Yang <kailang@realtek.com>,
        Jian-Hong Pan <jian-hong@endlessm.com>,
        Tomas Espeleta <tomas.espeleta@gmail.com>,
        Thomas Hebb <tommyhebb@gmail.com>,
        alsa-devel@alsa-project.org (moderated list:SOUND),
        linux-kernel@vger.kernel.org (open list)
Subject: Re: [PATCH 1/2] ALSA: hda: Make codec controlled LED support more generic
In-Reply-To: <20200616044702.17570-1-kai.heng.feng@canonical.com>
References: <20200616044702.17570-1-kai.heng.feng@canonical.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, 16 Jun 2020 06:46:58 +0200,
Kai-Heng Feng wrote:
> 
> Currently, only HDA codec GPIO controlled LED class is supported, and
> only via platform specific quirk.
> 
> There are systems that control LED via COEF instead of GPIO, and to
> support those systems, move the LED class registration to
> snd_hda_gen_add_micmute_led(), so all systems can facilitate the same
> interface.

This will result in creating the led cdev always when the mic-mute LED
feature is used, not only for HP but also for Dell and Huawei.
Is this the intended result?


thanks,

Takashi

> 
> In addition to that, add LED_CORE_SUSPENDRESUME flag since some systems
> don't restore the LED properly after suspend.
> 
> Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
> ---
>  sound/pci/hda/hda_generic.c   | 28 ++++++++++++++++++++++++++++
>  sound/pci/hda/patch_realtek.c | 30 ------------------------------
>  2 files changed, 28 insertions(+), 30 deletions(-)
> 
> diff --git a/sound/pci/hda/hda_generic.c b/sound/pci/hda/hda_generic.c
> index f4e9d9445e18..4242407734c0 100644
> --- a/sound/pci/hda/hda_generic.c
> +++ b/sound/pci/hda/hda_generic.c
> @@ -4006,6 +4006,28 @@ static const struct snd_kcontrol_new micmute_led_mode_ctl = {
>   *
>   * Returns 0 if the hook is established or a negative error code.
>   */
> +
> +#if IS_REACHABLE(CONFIG_LEDS_TRIGGER_AUDIO)
> +static int micmute_led_set(struct led_classdev *led_cdev,
> +			   enum led_brightness brightness)
> +{
> +	struct hda_codec *codec = dev_to_hda_codec(led_cdev->dev->parent);
> +	struct hda_gen_spec *spec = codec->spec;
> +
> +	spec->micmute_led.led_mode = !brightness;
> +	call_micmute_led_update(codec);
> +	return 0;
> +}
> +
> +static struct led_classdev micmute_led_cdev = {
> +	.name = "hda::micmute",
> +	.max_brightness = 1,
> +	.brightness_set_blocking = micmute_led_set,
> +	.default_trigger = "audio-micmute",
> +	.flags = LED_CORE_SUSPENDRESUME,
> +};
> +#endif
> +
>  int snd_hda_gen_add_micmute_led(struct hda_codec *codec,
>  				void (*hook)(struct hda_codec *))
>  {
> @@ -4019,6 +4041,12 @@ int snd_hda_gen_add_micmute_led(struct hda_codec *codec,
>  	spec->cap_sync_hook = update_micmute_led;
>  	if (!snd_hda_gen_add_kctl(spec, NULL, &micmute_led_mode_ctl))
>  		return -ENOMEM;
> +
> +#if IS_REACHABLE(CONFIG_LEDS_TRIGGER_AUDIO)
> +	micmute_led_cdev.brightness = ledtrig_audio_get(LED_AUDIO_MICMUTE);
> +	if (devm_led_classdev_register(&codec->core.dev, &micmute_led_cdev))
> +		codec_warn(codec, "failed to register micmute LED\n");
> +#endif
>  	return 0;
>  }
>  EXPORT_SYMBOL_GPL(snd_hda_gen_add_micmute_led);
> diff --git a/sound/pci/hda/patch_realtek.c b/sound/pci/hda/patch_realtek.c
> index 6d73f8beadb6..cead44a6c6cd 100644
> --- a/sound/pci/hda/patch_realtek.c
> +++ b/sound/pci/hda/patch_realtek.c
> @@ -4109,26 +4109,6 @@ static void alc_gpio_micmute_update(struct hda_codec *codec)
>  			    spec->gen.micmute_led.led_value);
>  }
>  
> -#if IS_REACHABLE(CONFIG_LEDS_TRIGGER_AUDIO)
> -static int micmute_led_set(struct led_classdev *led_cdev,
> -			   enum led_brightness brightness)
> -{
> -	struct hda_codec *codec = dev_to_hda_codec(led_cdev->dev->parent);
> -	struct alc_spec *spec = codec->spec;
> -
> -	alc_update_gpio_led(codec, spec->gpio_mic_led_mask,
> -			    spec->micmute_led_polarity, !!brightness);
> -	return 0;
> -}
> -
> -static struct led_classdev micmute_led_cdev = {
> -	.name = "hda::micmute",
> -	.max_brightness = 1,
> -	.brightness_set_blocking = micmute_led_set,
> -	.default_trigger = "audio-micmute",
> -};
> -#endif
> -
>  /* setup mute and mic-mute GPIO bits, add hooks appropriately */
>  static void alc_fixup_hp_gpio_led(struct hda_codec *codec,
>  				  int action,
> @@ -4136,9 +4116,6 @@ static void alc_fixup_hp_gpio_led(struct hda_codec *codec,
>  				  unsigned int micmute_mask)
>  {
>  	struct alc_spec *spec = codec->spec;
> -#if IS_REACHABLE(CONFIG_LEDS_TRIGGER_AUDIO)
> -	int err;
> -#endif
>  
>  	alc_fixup_gpio(codec, action, mute_mask | micmute_mask);
>  
> @@ -4151,13 +4128,6 @@ static void alc_fixup_hp_gpio_led(struct hda_codec *codec,
>  	if (micmute_mask) {
>  		spec->gpio_mic_led_mask = micmute_mask;
>  		snd_hda_gen_add_micmute_led(codec, alc_gpio_micmute_update);
> -
> -#if IS_REACHABLE(CONFIG_LEDS_TRIGGER_AUDIO)
> -		micmute_led_cdev.brightness = ledtrig_audio_get(LED_AUDIO_MICMUTE);
> -		err = devm_led_classdev_register(&codec->core.dev, &micmute_led_cdev);
> -		if (err)
> -			codec_warn(codec, "failed to register micmute LED\n");
> -#endif
>  	}
>  }
>  
> -- 
> 2.17.1
> 
