Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id DD4072D6812
	for <lists+linux-kernel@lfdr.de>; Thu, 10 Dec 2020 21:07:22 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S2404555AbgLJUGN (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Thu, 10 Dec 2020 15:06:13 -0500
Received: from smtprelay0158.hostedemail.com ([216.40.44.158]:60664 "EHLO
        smtprelay.hostedemail.com" rhost-flags-OK-OK-OK-FAIL)
        by vger.kernel.org with ESMTP id S2393719AbgLJUGC (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 10 Dec 2020 15:06:02 -0500
Received: from filter.hostedemail.com (clb03-v110.bra.tucows.net [216.40.38.60])
        by smtprelay05.hostedemail.com (Postfix) with ESMTP id D474318026130;
        Thu, 10 Dec 2020 20:05:06 +0000 (UTC)
X-Session-Marker: 6A6F6540706572636865732E636F6D
X-Spam-Summary: 2,0,0,,d41d8cd98f00b204,joe@perches.com,,RULES_HIT:2:41:69:355:379:599:800:960:973:982:988:989:1260:1277:1311:1313:1314:1345:1359:1437:1515:1516:1518:1535:1593:1594:1605:1606:1730:1747:1777:1792:1981:2194:2197:2199:2200:2393:2559:2562:2828:2890:3138:3139:3140:3141:3142:3622:3653:3865:3866:3867:3868:3870:3871:3872:3874:4042:4117:4250:4321:4605:5007:6119:7875:7903:8531:10004:10946:11026:11232:11473:11658:11914:12043:12048:12291:12296:12297:12438:12555:12683:12740:12895:13141:13161:13229:13230:13255:13439:13894:14659:21080:21212:21221:21433:21450:21451:21627:21966:21990:30001:30012:30030:30054:30070:30075:30091,0,RBL:none,CacheIP:none,Bayesian:0.5,0.5,0.5,Netcheck:none,DomainCache:0,MSF:not bulk,SPF:,MSBL:0,DNSBL:none,Custom_rules:0:0:0,LFtime:2,LUA_SUMMARY:none
X-HE-Tag: kick42_05118bb273fb
X-Filterd-Recvd-Size: 6732
Received: from XPS-9350.home (unknown [47.151.137.21])
        (Authenticated sender: joe@perches.com)
        by omf17.hostedemail.com (Postfix) with ESMTPA;
        Thu, 10 Dec 2020 20:05:05 +0000 (UTC)
Message-ID: <c3f1d9de2e5a61588f64e69a1309968d84a2dd12.camel@perches.com>
Subject: Re: [PATCH] checkpatch: make the line length warnings match the
 coding style document
From:   Joe Perches <joe@perches.com>
To:     Christoph Hellwig <hch@lst.de>, apw@canonical.com,
        Linus Torvalds <torvalds@linux-foundation.org>,
        Andrew Morton <akpm@linux-foundation.org>
Cc:     linux-kernel@vger.kernel.org,
        linux-doc <linux-doc@vger.kernel.org>,
        Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
Date:   Thu, 10 Dec 2020 12:05:04 -0800
In-Reply-To: <20201210082251.2717564-1-hch@lst.de>
References: <20201210082251.2717564-1-hch@lst.de>
Content-Type: text/plain; charset="ISO-8859-1"
User-Agent: Evolution 3.38.1-1 
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Thu, 2020-12-10 at 09:22 +0100, Christoph Hellwig wrote:
> Add a new informational message that lines <= 80 chars are still
> preffered.  Without this people unfortunately auto format code way over
> 80 lines without the required benefit for readability.

In general, I agree with some of the concept, though I think 80
columns is sometimes overly restrictive.

Also, given the ever increasing average identifier length, strict
adherence to 80 columns is sometimes just not possible without silly
visual gymnastics.  The kernel now has quite a lot of 30+ character
length function names, constants, and structs.

(these generic searches probably have some false positives and negatives)

# defines
$ git grep -P -oh 'define\s+\w{30,}(?!\()' -- '*.[ch]' | sort | uniq | wc -l
1009715
(A lot or even most of those are autogenerated and never used)

# function like macros
$ git grep -P -oh 'define\s+\w{30,}\(' -- '*.[ch]' | sort | uniq | wc -l
6583

# functions
$ git grep -P -oh '\b(?!define)\w+\s+\w{30,}\s*\(' -- '*.[ch]' | sort | uniq | wc -l
31091

# structs
$ git grep -P -oh 'struct\s+\w{30,}' -- '*.[ch]' | sort | uniq | wc -l
3250

Using those identifiers with 80 column restrictions is just stupid.

A logical complexity analysis, and/or something that takes those long
identifiers into account rather than a simple line length test might
be more appropriate though more difficult to create.

Perhaps this should be enabled/disabled similarly to --check where
the reporting is not done unless specifically requested via something
like --info.

And in that case, maybe it should just as well be a --strict CHK test.

> Signed-off-by: Christoph Hellwig <hch@lst.de>
> ---
>  scripts/checkpatch.pl | 41 ++++++++++++++++++++++++++++++-----------
>  1 file changed, 30 insertions(+), 11 deletions(-)
> 
> diff --git a/scripts/checkpatch.pl b/scripts/checkpatch.pl
> index fab38b493cef79..d937889a5fe3b2 100755
> --- a/scripts/checkpatch.pl
> +++ b/scripts/checkpatch.pl
> @@ -54,6 +54,7 @@ my @ignore = ();
>  my $help = 0;
>  my $configuration_file = ".checkpatch.conf";
>  my $max_line_length = 100;
> +my $preferred_line_length = 80;
>  my $ignore_perl_version = 0;
>  my $minimum_perl_version = 5.10.0;
>  my $min_conf_desc_length = 4;
> @@ -2228,6 +2229,16 @@ sub WARN {
>  	}
>  	return 0;
>  }
> +sub INFO {
> +	my ($type, $msg) = @_;
> +
> +	if (report("INFO", $type, $msg)) {
> +		our $clean = 0;
> +		our $cnt_info++;
> +		return 1;
> +	}
> +	return 0;
> +}
>  sub CHK {
>  	my ($type, $msg) = @_;
>  
> 
> @@ -2396,6 +2407,7 @@ sub process {
>  	our $cnt_lines = 0;
>  	our $cnt_error = 0;
>  	our $cnt_warn = 0;
> +	our $cnt_info = 0;
>  	our $cnt_chk = 0;
>  
> 
>  	# Trace the real file/line as we go.
> @@ -3343,15 +3355,15 @@ sub process {
>  # if LONG_LINE is ignored, the other 2 types are also ignored
>  #
>  
> 
> -		if ($line =~ /^\+/ && $length > $max_line_length) {
> +		if ($line =~ /^\+/ && $length > $preferred_line_length) {
>  			my $msg_type = "LONG_LINE";
>  
> 
>  			# Check the allowed long line types first
>  
> 
>  			# logging functions that end in a string that starts
> -			# before $max_line_length
> +			# before $preferred_line_length
>  			if ($line =~ /^\+\s*$logFunctions\s*\(\s*(?:(?:KERN_\S+\s*|[^"]*))?($String\s*(?:|,|\)\s*;)\s*)$/ &&
> -			    length(expand_tabs(substr($line, 1, length($line) - length($1) - 1))) <= $max_line_length) {
> +			    length(expand_tabs(substr($line, 1, length($line) - length($1) - 1))) <= $preferred_line_length) {
>  				$msg_type = "";
>  
> 
>  			# lines with only strings (w/ possible termination)
> @@ -3371,23 +3383,30 @@ sub process {
>  
> 
>  			# Otherwise set the alternate message types
>  
> 
> -			# a comment starts before $max_line_length
> +			# a comment starts before $preferred_line_length
>  			} elsif ($line =~ /($;[\s$;]*)$/ &&
> -				 length(expand_tabs(substr($line, 1, length($line) - length($1) - 1))) <= $max_line_length) {
> +				 length(expand_tabs(substr($line, 1, length($line) - length($1) - 1))) <= $preferred_line_length) {
>  				$msg_type = "LONG_LINE_COMMENT"
>  
> 
> -			# a quoted string starts before $max_line_length
> +			# a quoted string starts before $preferred_line_length
>  			} elsif ($sline =~ /\s*($String(?:\s*(?:\\|,\s*|\)\s*;\s*))?)$/ &&
> -				 length(expand_tabs(substr($line, 1, length($line) - length($1) - 1))) <= $max_line_length) {
> +				 length(expand_tabs(substr($line, 1, length($line) - length($1) - 1))) <= $preferred_line_length) {
>  				$msg_type = "LONG_LINE_STRING"
>  			}
>  
> 
>  			if ($msg_type ne "" &&
>  			    (show_type("LONG_LINE") || show_type($msg_type))) {
> -				my $msg_level = \&WARN;
> -				$msg_level = \&CHK if ($file);
> -				&{$msg_level}($msg_type,
> +				my $msg_level = \&CHK;
> +		
> +				if ($line =~ /^\+/ && $length <= $max_line_length) {
> +					$msg_level = \&INFO if (!$file);
> +					&{$msg_level}($msg_type,
> +					      "line length of $length exceeds preferred $preferred_line_length columns\n" . $herecurr);
> +				} else {
> +					$msg_level = \&WARN if (!$file);
> +					&{$msg_level}($msg_type,
>  					      "line length of $length exceeds $max_line_length columns\n" . $herecurr);
> +				}
>  			}
>  		}
>  
> 
> @@ -7015,7 +7034,7 @@ sub process {
>  	print report_dump();
>  	if ($summary && !($clean == 1 && $quiet == 1)) {
>  		print "$filename " if ($summary_file);
> -		print "total: $cnt_error errors, $cnt_warn warnings, " .
> +		print "total: $cnt_error errors, $cnt_warn warnings, $cnt_info informational, " .
>  			(($check)? "$cnt_chk checks, " : "") .
>  			"$cnt_lines lines checked\n";
>  	}


