Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [23.128.96.18])
	by mail.lfdr.de (Postfix) with ESMTP id 759701E1800
	for <lists+linux-kernel@lfdr.de>; Tue, 26 May 2020 00:59:30 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1729911AbgEYW7X (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Mon, 25 May 2020 18:59:23 -0400
Received: from mail-qt1-f196.google.com ([209.85.160.196]:33600 "EHLO
        mail-qt1-f196.google.com" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S1725834AbgEYW7W (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Mon, 25 May 2020 18:59:22 -0400
Received: by mail-qt1-f196.google.com with SMTP id e16so8922263qtg.0
        for <linux-kernel@vger.kernel.org>; Mon, 25 May 2020 15:59:20 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20161025;
        h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
         :references:mime-version:content-transfer-encoding;
        bh=nkhs1vMkliVWrepyz3nCPdQswI/d3UMqurs0UD2o4Lc=;
        b=J0wlypC/yxLo0v2RHdqhJsjY4tRUNUmqT5S+m0VJ0ps0eLEFSKr52h4StPkzP1VH86
         DhIwU5kmNcrE8z/SXpDMFBZhbeXDpFTXCOZwThL3rQkjxJAs6QvE8ukgyvzFeHLXiV39
         2UW1vFRgVmWLWNgt6h0d8PRk8wqsArBNJxjhlhbkCx9s+GlcNrfkFfLYa2ivlGaWx99J
         sPckqIXNvNcoJHzXxfarULnrytfGm3K95LvsojhltTd5aklLaN2J60gPyFyyazt/XPpw
         qIHRLm/6NNobExAF2bZUuJvIqj8XAUpphR3IzGCQ/RcJqO/1OPoAsToFZ1JFNpTMX30J
         UMjg==
X-Gm-Message-State: AOAM531jYc2GELt4oRRDXGMbxp3Jba5/lelyJl+C0HXgHVFa2yCtuows
        cbEjo24oOOujoOqrVnTxeQg=
X-Google-Smtp-Source: ABdhPJwemMCpixd/VkVsZpPjyun6nr8KM9JhDlrnpvWkKxuXa2chSkOpg5pHB8lvcIdb3Yv9qIYE4g==
X-Received: by 2002:ac8:543:: with SMTP id c3mr29290586qth.8.1590447560082;
        Mon, 25 May 2020 15:59:20 -0700 (PDT)
Received: from rani.riverdale.lan ([2001:470:1f07:5f3::b55f])
        by smtp.gmail.com with ESMTPSA id d140sm15024585qkc.22.2020.05.25.15.59.18
        (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
        Mon, 25 May 2020 15:59:19 -0700 (PDT)
From:   Arvind Sankar <nivedita@alum.mit.edu>
To:     Thomas Gleixner <tglx@linutronix.de>,
        Ingo Molnar <mingo@redhat.com>, Borislav Petkov <bp@alien8.de>,
        "H. Peter Anvin" <hpa@zytor.com>, x86@kernel.org
Cc:     Nick Desaulniers <ndesaulniers@google.com>,
        Fangrui Song <maskray@google.com>,
        Dmitry Golovin <dima@golovin.in>,
        clang-built-linux@googlegroups.com,
        Ard Biesheuvel <ardb@kernel.org>,
        Masahiro Yamada <masahiroy@kernel.org>,
        Daniel Kiper <daniel.kiper@oracle.com>,
        linux-kernel@vger.kernel.org
Subject: [PATCH v2 0/4] x86/boot: Remove runtime relocations from compressed kernel
Date:   Mon, 25 May 2020 18:59:14 -0400
Message-Id: <20200525225918.1624470-1-nivedita@alum.mit.edu>
X-Mailer: git-send-email 2.26.2
In-Reply-To: <20200524212816.243139-1-nivedita@alum.mit.edu>
References: <20200524212816.243139-1-nivedita@alum.mit.edu>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

The compressed kernel currently contains bogus runtime relocations in
the startup code in head_{32,64}.S, which are generated by the linker,
but must not actually be processed at runtime.

This generates warnings when linking with the BFD linker, and errors
with LLD, which defaults to erroring on runtime relocations in read-only
sections. It also requires the -z noreloc-overflow hack for the 64-bit
kernel, which prevents us from linking it as -pie on an older BFD linker
(<= 2.26) or on LLD, because the locations that are to be apparently
relocated are only 32-bits in size and so cannot normally have
R_X86_64_RELATIVE relocations.

This series aims to get rid of these relocations. It is based on
efi/next, where the latest patches touch the head code to eliminate the
global offset table.

The first patch is an independent fix for LLD, to avoid an orphan
section in arch/x86/boot/setup.elf.

The second patch gets rid of almost all the relocations. It uses
standard PIC addressing technique for 32-bit, i.e. loading a register
with the address of _GLOBAL_OFFSET_TABLE_ and then using GOTOFF
references to access variables. For 64-bit, there is 32-bit code that
cannot use RIP-relative addressing, and also cannot use the 32-bit
method, since GOTOFF references are 64-bit only. This is instead handled
using a macro to replace a reference like gdt with (gdt-startup_32)
instead. The assembler will generate a PC32 relocation entry, with
addend set to (.-startup_32), and these will be replaced with constants
at link time. This works as long as all the code using such references
lives in the same section as startup_32, i.e. in .head.text.

The third patch addresses a remaining issue with the BFD linker, which
insists on generating runtime relocations for absolute symbols. We use
z_input_len and z_output_len, defined in the generated piggy.S file, as
symbols whose absolute "addresses" are actually the size of the
compressed payload and the size of the decompressed kernel image
respectively. LLD does not generate relocations for these two symbols,
but the BFD linker does, prior to the upcoming 2.35. To get around this,
piggy.S is extended to also define two u32 variables (in .rodata) with
the lengths, and the head code is modified to use those instead of the
symbol addresses.

An alternative way to handle z_input_len/z_output_len would be to just
include piggy.S in head_{32,64}.S instead of as a separate object file,
since the GNU assembler doesn't generate relocations for symbols set to
constants.

The last patch adds a check in the linker script to ensure that no
runtime relocations get reintroduced. Since the GOT has been eliminated
as well, the compressed kernel has no runtime relocations whatsoever any
more.

Changes from v1:
- Add .text.* to setup.ld instead of just .text.startup
- Rename the la() macro introduced in the second patch for 64-bit to
  rva(), and rework the explanatory comment.
- In the last patch, check both .rel.dyn and .rela.dyn, instead of just
  one per arch.

Arvind Sankar (4):
  x86/boot: Add .text.* to setup.ld
  x86/boot: Remove run-time relocations from .head.text code
  x86/boot: Remove runtime relocations from head_{32,64}.S
  x86/boot: Check that there are no runtime relocations

 arch/x86/boot/compressed/Makefile      |  36 +--------
 arch/x86/boot/compressed/head_32.S     |  59 +++++++-------
 arch/x86/boot/compressed/head_64.S     | 108 +++++++++++++++----------
 arch/x86/boot/compressed/mkpiggy.c     |   6 ++
 arch/x86/boot/compressed/vmlinux.lds.S |   8 ++
 arch/x86/boot/setup.ld                 |   2 +-
 6 files changed, 115 insertions(+), 104 deletions(-)

-- 
2.26.2

